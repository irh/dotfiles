theme = 'onedark_tweaked'

[editor]
bufferline = "multiple"
clipboard-provider = "pasteboard" # Skip tmux clipboard (macos specific)
color-modes = true
command-git-ignore = false # See https://github.com/helix-editor/helix/pull/11957
end-of-line-diagnostics = "warning"
inline-diagnostics.cursor-line = "error"
jump-label-alphabet = "nteslpufhd,ciryw.xoa;q/zmgjbkv" # colemak d-h, prioritizing central keys
popup-border = "all"
rounded-corners = true # See https://github.com/helix-editor/helix/pull/11497

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.file-picker]
hidden = false

[editor.indent-guides]
render = true
character = "┊"
skip-levels = 1

[editor.lsp]
display-progress-messages = true

[editor.soft-wrap]
enable = true

# [editor.inline-diagnostics]
# cursor-line = "warning" # show warnings and errors on the cursorline inline

[keys.normal]
"ret" = "goto_word"
"x" = "extend_line" # Allow x to work upwards following Alt-;
"=" = ":format"     # Format the file and not just a selection

# Override I to collapse selection and insert
"I" = ["collapse_selection", "insert_mode"]

# Vim-style paragraph motions
"{" = "goto_prev_paragraph"
"}" = "goto_next_paragraph"

#--- Mac alt key workarounds
"≥" = "repeat_last_motion"                 # Alt-.
"∂" = "delete_selection_noyank"            # Alt-d
"ç" = "change_selection_noyank"            # Alt-c
"«" = "shell_pipe_to"                      # Alt-|
"⁄" = "shell_append_output"                # Alt-!
"ß" = "split_selection_on_newline"         # Alt-s
"…" = "flip_selections"                    # Alt-;
"Ú" = "ensure_selections_forward"          # Alt-:
"≤" = "remove_primary_selection"           # Alt-,
"Ç" = "copy_selection_on_prev_line"        # Alt-C
"·" = "rotate_selection_contents_backward" # Alt-(
"‚" = "rotate_selection_contents_forward"  # Alt-)
"≈" = "shrink_to_line_bounds"              # Alt-x
"" = "remove_selections"                  # Alt-K
"ø" = "expand_selection"                   # Alt-o
"ˆ" = "shrink_selection"                   # Alt-i
"π" = "select_prev_sibling"                # Alt-p
"˜" = "select_next_sibling"                # Alt-n
"•" = "search_selection"                   # Alt-*

# Alt-` (no way to capture this; Alt-` is the same as `)
# "???" = "switch_to_uppercase"

# Alt-u / Alt-U (no way to capture this; Alt-u is the same as Alt-U)
# "¨" = "earlier"
# "¨" = "later"

[keys.normal.space]
"e" = "file_explorer"
"E" = "file_explorer_in_current_buffer_directory"

"F" = "file_picker_in_current_buffer_directory"

"i" = ":toggle lsp.display-inlay-hints" # Toggle type hints

"n" = ":reload-all"

"o" = "symbol_picker"           # Document symbols
"O" = "workspace_symbol_picker" # Workspace symbols

"q" = ":write-quit-all"  # Write all and quit
"Q" = ":write-quit-all!" # Write all and quit, discard scratch buffers
"s" = ":write-all"       # Write all buffers
"S" = ":write-all!"      # Write all buffers forcefully, creating subdirectories

# Toggle markdown bullet
"t" = [
  # Extend the selection to include the whole line (or lines),
  # without selecting an extra line when a single line is selected
  "extend_to_line_start",
  "flip_selections",
  "extend_to_line_end",
  "extend_line",
  ":pipe toggle-markdown-bullet.koto",
  # Move the cursor to the start of the line and collapse the selection
  # (this is the only way I've found to have consistent behaviour between
  # single and multi-line toggling).
  "goto_first_nonwhitespace",
  "collapse_selection",
]

"T" = [":edit %sh{today --print-path}"] # Open today's log file

# Toggle markdown checkboxes
"x" = [
  # Extend the selection to include the whole line (or lines),
  # without selecting an extra line when a single line is selected
  "extend_to_line_start",
  "flip_selections",
  "extend_to_line_end",
  "extend_line",
  ":pipe toggle-markdown-checkbox.koto",
  # Move the cursor to the start of the line and collapse the selection
  # (this is the only way I've found to have consistent behaviour between
  # single and multi-line toggling).
  "goto_first_nonwhitespace",
  "collapse_selection",
]

# Show current file in yazi
"z" = [
  ':sh rm -f /tmp/yazi-file',
  ':insert-output yazi %{buffer_name} --chooser-file=/tmp/yazi-file',
  ':insert-output echo "\x1b[?1049h\x1b[?2004h" > /dev/tty',
  ':open %sh{cat /tmp/yazi-file}',
  ':redraw',
]

[keys.normal.space.space]
# show blame for current line
"b" = ":sh git-blame.koto %{cursor_line},%{cursor_line} %{buffer_name}"
# Open selection in Dash
"h" = ["collapse_selection", "expand_selection", ":sh open-in-dash.koto %{language} %{selection}"]
# Trim all whitespace in file
# See https://github.com/helix-editor/helix/pull/8366
"t" = ["save_selection", "select_all", ":trim", "collapse_selection", "jump_backward"]
# Show workspace commands
"w" = [":lsp-workspace-command"]

[keys.normal.tab]

# Insert date as markdown subheading
"d" = [
  ":insert-output date-header.koto",
  "open_below",
  "insert_newline",
]

"n" = "@|sc \"\"<C-b>"
"m" = "@|sc md \"\"<C-b>"
"t" = "@|sc typst \"\"<C-b>"

[keys.normal.m]

# surround selection with an HTML tag, then edit the tag name
"t" = "@|surround-tag.koto<ret>sxxx<ret>c"

[keys.insert]

"C-s" = ":write-all"  # Write all buffers
"C-S" = ":write-all!" # Write all buffers forcefully, creating subdirectories
"C-t" = "indent"
"C-x" = "unindent"

[keys.select]
"ret" = "extend_to_word"

# Vim-style paragraph motions
"{" = "goto_prev_paragraph"
"}" = "goto_next_paragraph"

# #--- Mac alt key workarounds
# "∂" = "delete_word_forward" # Alt-d
# "∫" = "move_prev_word_end" # Alt-b
# "ƒ" = "move_next_word_start" # Alt-f
# "˘" = "goto_file_end" # Alt->
# "¯" = "goto_file_start" # Alt-<
