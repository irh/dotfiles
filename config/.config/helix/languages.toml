[[language]]
name = "css"
language-servers = ["vscode-css-language-server", "tailwindcss-ls"]

[[language]]
name = "javascript"
auto-format = true

[[language]]
name = "markdown"
text-width = 100
language-servers = ["harper-ls", "marksman", "markdown-oxide"]
comment-tokens = ["-", "+", "*", "1.", ">", "- [ ]"]

[[language]]
name = "javascript"
auto-format = true

[[language]]
name = "rust"
rulers = [101]
text-width = 100
language-servers = ["rust-analyzer", "harper-ls"]

[[language]]
name = "svelte"
auto-format = true
language-servers = ["svelteserver", "tailwindcss-ls"]

[[language]]
name = "toml"
auto-format = false
formatter = { command = "taplo", args = ["format", "-"] }

[[language]]
name = "typst"
language-servers = ["tinymist", "harper-ls"]
formatter = { command = "typstyle" }
auto-format = true

# See <https://writewithharper.com/docs/integrations/neovim#Configuration>
[language-server.harper-ls.config.harper-ls]
linters = { an_a = false }
isolateEnglish = true

[language-server.rust-analyzer.config.completion.snippets.custom.bevyplugin]
description = "Define a new bevy plugin in an empty file"
prefix = "bvplugin"
scope = "item"
body = """
use bevy::prelude::*;

pub struct ${1}Plugin;

impl Plugin for ${1}Plugin {
    fn build(&self, app: &mut App) {
        $0
    }
}
"""

[language-server.rust-analyzer.config.completion.snippets.custom.bevyevent]
description = "Define a new bevy Event"
prefix = "bvevent"
scope = "item"
body = """
#[derive(Event)]
pub struct $0;
"""

[language-server.rust-analyzer.config.completion.snippets.custom.bevyresource]
description = "Define a new bevy Resource"
prefix = "bvresource"
scope = "item"
body = """
#[derive(Resource)]
pub struct $1 {
    $0
}
"""


# [language-server.koto-ls]
# command = "koto-ls"

# [[language]]
# name = "koto"
# scope = "source.koto"
# injection-regex = "koto"
# file-types = ["koto"]
# comment-token = "#"
# indent = { tab-width = 2, unit = "  " }
# roots = []
# language-servers = [ "koto-ls" ]

# [[grammar]]
# name = "koto"
# source = { git = "https://github.com/koto-lang/tree-sitter-koto", rev = "main" }
